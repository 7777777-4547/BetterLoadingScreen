package me.shedaniel.betterloadingscreen;

import blue.endless.jankson.Jankson;
import blue.endless.jankson.JsonGrammar;
import dev.architectury.injectables.annotations.ExpectPlatform;

import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Locale;

public class BetterLoadingScreen {
    public static final String MOD_ID = "better_loading_screen";
    public static final BetterLoadingScreenConfig CONFIG;
    public static final Path BACKGROUND_PATH;
    
    static {
        Jankson jankson = Jankson.builder().build();
        Path configModDir = getConfigDir().resolve(MOD_ID);
        BACKGROUND_PATH = configModDir.resolve("background.png");
        Path path = configModDir.resolve("config.json5");
        if (path.getParent() != null) {
            try {
                Files.createDirectories(path.getParent());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        BetterLoadingScreenConfig config;
        if (Files.exists(path)) {
            try {
                String configStr = new String(Files.readAllBytes(path), StandardCharsets.UTF_8);
                config = jankson.fromJson(configStr, BetterLoadingScreenConfig.class);
            } catch (Exception e) {
                e.printStackTrace();
                config = new BetterLoadingScreenConfig();
            }
        } else {
            config = new BetterLoadingScreenConfig();
        }
        try {
            String json = jankson.toJson(config).toJson(JsonGrammar.builder()
                    .withComments(true)
                    .printTrailingCommas(true)
                    .bareSpecialNumerics(true)
                    .printUnquotedKeys(true)
                    .build());
            json =
                    "/*" + "\n" +
                    "    Configuration for Better Loading Screen," + "\n" +
                    "    this file is automatically generated, and is formatted under JSON5." + "\n" +
                    "    " + "\n" +
                    "    Custom Image Background: Place the image (Ideally 16:9) in config/better_loading_screen/background.png" + "\n" +
                    "*/" + "\n"
                    + json;
//            Custom Bar Frame: Place the image (Must be 10 pixels tall) in config/better_loading_screen/bar_frame.png
//            Custom Bar Filler: Place the image (Must be 8 pixels tall) in config/better_loading_screen/bar_filler.png
//            Custom Bar Knob: Place the image (Should be a square) in config/better_loading_screen/bar_knob.png
            Files.write(path, json.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
        } catch (Exception e) {
            e.printStackTrace();
        }
        CONFIG = config;
    }
    
    @ExpectPlatform
    private static Path getConfigDir() {
        throw new AssertionError();
    }
    
    public static void init() {
    }
    
    public static boolean isEarlyLoadingEnabled() {
        return !isMac();
    }
    
    public static boolean isFurtherLoadingEnabled() {
        return isEarlyLoadingEnabled() && !BetterLoadingScreenCommonMixinPlugin.hasOptifine();
    }
    
    public static boolean isMac() {
        String string = System.getProperty("os.name").toLowerCase(Locale.ROOT);
        return string.contains("mac");
    }
}
